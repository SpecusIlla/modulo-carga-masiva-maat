
name: MAAT v1.3.0 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}

jobs:
  test:
    name: Tests y Validación
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependencias
      run: npm ci
      
    - name: Lint código
      run: npm run lint
      
    - name: Verificar tipos TypeScript
      run: npm run type-check
      
    - name: Ejecutar tests unitarios
      run: npm run test:unit
      
    - name: Ejecutar tests de integración
      run: npm run test:integration
      
    - name: Ejecutar tests E2E
      run: npm run test:e2e
      
    - name: Generar reporte de cobertura
      run: npm run test:coverage
      
    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        
  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
      
    - name: Ejecutar audit de dependencias
      run: npm audit --audit-level high
      
    - name: Escanear vulnerabilidades con Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
    - name: Análisis estático con CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: typescript, javascript
        
    - name: Ejecutar análisis CodeQL
      uses: github/codeql-action/analyze@v2

  build:
    name: Build y Optimización
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Instalar dependencias
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Optimizar assets
      run: npm run optimize
      
    - name: Generar documentación API
      run: npm run docs:generate
      
    - name: Comprimir artefactos
      run: |
        tar -czf maat-v1.3.0-build.tar.gz \
          dist/ \
          docs/ \
          package.json \
          README.md
          
    - name: Subir artefactos de build
      uses: actions/upload-artifact@v3
      with:
        name: maat-build
        path: maat-v1.3.0-build.tar.gz

  deploy-staging:
    name: Deploy a Staging (Replit)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Descargar artefactos
      uses: actions/download-artifact@v3
      with:
        name: maat-build
        
    - name: Deploy a Replit Staging
      run: |
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "repl": "maat-staging",
            "action": "deploy",
            "source": "github",
            "branch": "develop"
          }' \
          https://api.replit.com/v1/deployments
          
    - name: Verificar deployment
      run: |
        sleep 30
        curl -f https://maat-staging.replit.app/health || exit 1

  deploy-production:
    name: Deploy a Producción (Replit)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Descargar artefactos
      uses: actions/download-artifact@v3
      with:
        name: maat-build
        
    - name: Deploy a Replit Production
      run: |
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "repl": "maat-production",
            "action": "deploy",
            "source": "github",
            "branch": "main",
            "autoscale": {
              "enabled": true,
              "min_instances": 1,
              "max_instances": 10
            }
          }' \
          https://api.replit.com/v1/deployments
          
    - name: Tests de humo en producción
      run: |
        sleep 60
        curl -f https://maat.replit.app/health || exit 1
        curl -f https://maat.replit.app/api/v1/metrics || exit 1
        
    - name: Notificar deployment exitoso
      if: success()
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "text": "✅ MAAT v1.3.0 desplegado exitosamente en producción",
            "channel": "#deployments"
          }' \
          ${{ secrets.SLACK_WEBHOOK }}

  performance-tests:
    name: Tests de Performance
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Tests de carga con Artillery
      run: |
        npm install -g artillery
        artillery run performance/load-test.yml
        
    - name: Tests de stress
      run: |
        artillery run performance/stress-test.yml
        
    - name: Análisis de métricas
      run: |
        curl -s https://maat-staging.replit.app/api/v1/metrics | \
        jq '.performance.averageSpeed' | \
        awk '$1 < 5 { exit 1 }' # Fallar si velocidad < 5 MB/s

  notify:
    name: Notificaciones
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notificar resultado
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.security.result }}" = "success" ] && \
           [ "${{ needs.build.result }}" = "success" ]; then
          STATUS="✅ Pipeline exitoso"
        else
          STATUS="❌ Pipeline falló"
        fi
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{
            \"text\": \"$STATUS para MAAT v1.3.0\",
            \"channel\": \"#development\"
          }" \
          ${{ secrets.SLACK_WEBHOOK }}
